/* vim: set ft=cpp */
/*
 * == Abstract ==
 * `Wintermute::Procedures` encapsulates the logic to handle the following:
 *
 *  + Implement a recognized service in the Wintermute processing environment. 
 *    This allows for other services and parts of operating code to call upon 
 *    them whenever necessary.
 *
 *  + Provide local or remote service discovery of other related running 
 *    instances of Wintermute. Although this might be done through an 
 *    extension, having remote instances of Wintermute run can allow for easy 
 *    remote procedure execution and thus turn a local set of machines into 
 *    a composed Wintermute computing unit.
 *
 *  == Procedure Calls ==
 *  Procedure calling can be done in two ways; blocking or passive.
 *
 *  Blocking calls execute and refuse to return until a result (no 
 *  result is considered to be a result) until a result is obtained. This is 
 *  like a single-threaded operation happening at n-speed. This kind of call 
 *  is recommended if you know that the chance of response time is instant 
 *  like on a local procedure call.
 *
 *  Passive calls execute on a completely separate thread, allowing the main 
 *  thread to continue operation normally. Passive calls can return 
 *  user-provided status codes as well as executional status codes that define 
 *  the operational state of the call. All expections are trapped and bubbled 
 *  up safely.
 *
 *  == Procedure Instances ==
 *
 *  Some might ask why Wintermute has all of these hurdles in providing 
 *  a remote & local procedure calling system and the philosophy behind it 
 *  came upon me on a all-night coding spree: EASE. I personally didn't want 
 *  to have write code over and over; I'd just want a simple class copy and 
 *  go. Thus `Wintermute::Procedures` came to be; a struggle I'd endure only 
 *  once.
 *
 *  One thing to note, all of the classes used shouldn't be public-facing 
 *  classes (can't be created using the `new` operator). However, there might 
 *  be a case where having an instance could be handy so an `instance` method 
 *  is provided. All of the objects are Qt-orientated so signals and slots 
 *  easily work with it.
 *
 *  In order to expose objects to the entire world of procedures, Wintermute 
 *  provides a few interfaces that can automatically expose your defined 
 *  classes into the world. The classes are as follows:
 *
 *  + `Wintermute::Procedures::Base` provides a class with the core functionality 
 *    required to get into remote procedure calling in Wintermute. More about 
 *    it can be found in `Wintermute/Procedure/Base`.
 *
 *  + `Wintermute::Procedures::Discoverable` provides it with the logic to 
 *    manipulate its front-facing interactivity with the outside world. More 
 *    about it can be found in `Wintermute/Procedure/Discovery/Base`.
 */

#ifndef WINTERMUTE_CORE_PROCEDURES_HPP
#define WINTERMUTE_CORE_PROCEDURES_HPP

#include <Wintermute/Procedure/Base>
#include <Wintermute/Procedure/Discovery/Base>

#endif /* WINTERMUTE_CORE_PROCEDURES_HPP */
