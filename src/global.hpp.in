/*
 * Wintermute is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * Wintermute is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with Wintermute; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 */

/**
 * @author Jacky Alcine <jacky.alcine@thesii.org>
 * @file   global.hpp
 *
 * File providing build-time data about suggested runtime-configuration.
 * Required for the core of Wintermute.
 */

#ifndef WINTERMUTE_GLOBAL_HPP
#define WINTERMUTE_GLOBAL_HPP

// Determine if we'll use Qt's session utility.
// Typically turned off.
#define WINTER_USE_QT_SESSIONS @WINTER_USE_QT_SESSIONS@
#ifndef WINTER_USE_QT_SESSIONS
# undef QT_NO_SESSIONMANAGER
#endif

// Determines if we'd play with the GUI.
#define WINTER_HEADLESS @WINTER_HEADLESS@
#ifndef WINTER_HEADLESS
#include <QCoreApplication>
#define WINTER_APPLICATION QCoreApplication
#else
#include <QApplication>
#define WINTER_APPLICATION QApplication
#endif

// Grab some standard headers from Qt; we'll need them.
#include <QtGlobal>
#include <QDebug>
#include <QDataStream>
#include <QMetaType>
#include <QSharedPointer>

// ** Build-time variables from CMake. **
#cmakedefine01 DEBUG
#cmakedefine01 WINTER_DEPRECATED_WARNINGS

// ** Symbol exporting **
/**
 * @def WINTER_EXPORT
 * @ingroup WintermuteMacros
 * @brief Determines the importing or exporting of dynamic symbols.
 * @note If you're defining a library using Wintermute's headers but don't use
 * pass WINTER_EXPORT as a variable, be sure to #define or #undef WINTER_EXPORT
 * before including global.hpp.
 *
 * Use this macro to define the exporting or importing of symbols from a library.
 * This macro is automatically updated by one of two values, WINTER_IMPORT_SYMBOL
 * or WINTER_EXPORT_SYMBOL.
 *
 * @def WINTER_IMPORT_SYMBOL
 * @ingroup WintermuteMacros
 * @brief
 */
#define WINTER_IMPORT_SYMBOL Q_DECL_IMPORT
#define WINTER_EXPORT_SYMBOL Q_DECL_EXPORT

// ** Set up WINTER_EXPORT as defined. **
#ifdef WINTER_EXPORT
# define WINTER_EXPORT WINTER_EXPORT_SYMBOL
#else
# define WINTER_EXPORT WINTER_IMPORT_SYMBOL
#endif

// *** D-Bus related macros ***
#define WINTER_DBUS_SERVICE_NAME    "org.thesii.Wintermute"
#define WINTER_DBUS_FACTORY         Factory
#define WINTER_DBUS_FACTORY_NAME    "##WINTER_DBUS_SERVICE_NAME##.##WINTER_DBUS_FACTORY##"
#define WINTER_DBUS_FACTORY_OBJNAME "/##WINTER_DBUS_FACTORY##"
#define WINTER_DBUS_FACTORY_OBJPATH "##WINTER_DBUS_SERVICE_NAME##.##WINTER_DBUS_FACTORY##"

#define WINTER_DBUS_MASTER          Master
#define WINTER_DBUS_MASTER_NAME     "##WINTER_DBUS_SERVICE_NAME##.##WINTER_DBUS_MASTER##"
#define WINTER_DBUS_MASTER_OBJNAME  "/##WINTER_DBUS_MASTER##"
#define WINTER_DBUS_MASTER_OBJPATH  "##WINTER_DBUS_SERVICE_NAME##.##WINTER_DBUS_MASTER##"

#define WINTER_DBUS_PLUGIN          Plugin
#define WINTER_DBUS_PLUGIN_NAME     "##WINTER_DBUS_SERVICE_NAME##.##WINTER_DBUS_PLUGIN##"
#define WINTER_DBUS_PLUGIN_OBJNAME  "/##WINTER_DBUS_PLUGIN##"
#define WINTER_DBUS_PLUGIN_OBJPATH  "##WINTER_DBUS_SERVICE_NAME##.##WINTER_DBUS_PLUGIN##"

#define WINTER_DBUS_VERBOSE_PINGS false
#define WINTER_DBUS_UPDATE_TIMEOUT 1000

// *** Versioning tools ***
#define WINTER_VERSION_STR "@WINTERMUTE_VERSION@"
#define WINTER_VERSION     @WINTERMUTE_VERSION@
#define WINTER_VERSION_CHECK(major, minor, patch) ((major<<16)|(minor<<8)|(patch))

// *** Plug-in specific data ***
#define WINTER_PLUGIN_PATH     "@WINTER_PLUGIN_INSTALL_DIR@"
#define WINTER_PLUGINSPEC_PATH "@WINTER_PLUGIN_SPEC_INSTALL_DIR@"

// *** Build-time specific about UI.
#define WINTER_DEBUG_TIMESTAMPS false

// *** Exit codes ***
// This helps developers and Wintermute alike recognize the exit
// state of an execution.

// == Standard codes ==
#define WINTER_EXITCODE_NORMAL                0x0000
#define WINTER_EXITCODE_REBOOT                0x0001
#define WINTER_EXITCODE_
#define WINTER_EXITCODE_FATAL                 0xffff

// Codes with 01X are for D-Bus.
#define WINTER_EXITCODE_DBUS                  0x0010

// *** Debug output levels ***
#define WINTER_DEBUG_NONE     0x000
#define WINTER_DEBUG_INFO     0x001
#define WINTER_DEBUG_WARN     0x002
#define WINTER_DEBUG FATAL    0x003
#define WINTER_DEBUG_CRITICAL 0x004

// *** Namespace and forward declaration utilities. ***
#define WINTER_NAMESPACE Wntr
#define WINTER_PREPEND_NAMESPACE(name) ::WINTER_NAMESPACE::name
#define WINTER_USE_NAMESPACE using namespace ::WINTER_NAMESPACE;
#define WINTER_BEGIN_NAMESPACE namespace WINTER_NAMESPACE {
#define WINTER_END_NAMESPACE }
#define WINTER_FORWARD_DECLARE_CLASS(name) \
        WINTER_BEGIN_NAMESPACE class name; WINTER_END_NAMESPACE\
        using WINTER_PREPEND_NAMESPACE(name);

#define WINTER_FORWARD_DECLARE_STRUCT(name) \
        WINTER_BEGIN_NAMESPACE struct name; WINTER_END_NAMESPACE\
        using WINTER_PREPEND_NAMESPACE(name);

#ifdef WINTER_NAMESPACE
    namespace WINTER_NAMESPACE { }
#endif

#define WINTER_DECLARE_METATYPE(Class) \
Q_DECLARE_METATYPE(Class) \

// ** Hooks for Qt's QMetaType system **
#define WINTER_DECLARE_METATYPE_OPERATORS(Class) \
QDataStream &operator<<(QDataStream &out);\
QDataStream &operator>>(QDataStream &in);\

// *** Opaque pointer add-ons ***
#define WINTER_DECLARE_PRIVATE_TEMPLATE(Class,T) \
inline Class##Private<T>* d_func() { return reinterpret_cast<Class##Private<T>*>(qGetPtrHelper(d_ptr)); } \
inline const Class##Private<T>* d_func() const { return reinterpret_cast<const Class##Private<T>*>(qGetPtrHelper(d_ptr)); } \
friend class Class##Private<T>;

#define WINTER_DECLARE_PUBLIC(Class,T) \
inline Class<T>* q_func() { return static_cast<Class<T> *>(q_ptr); } \
inline const Class<T>* q_func() const { return static_cast<const Class<T> *>(q_ptr); } \
friend class Class<T>;

#define WINTER_D_Q_TEMPLATE(Class,T) Class##Private<T> * const d = d_func()
#define WINTER_Q_Q_TEMPLATE(Class,T) Class<T> * const q = q_func()

// Nifty debugging macros.
#define TRACE_MSG fprintf(stderr, __FUNCTION__  \
"() [%s:%d] here I am\n", \
__FILE__, __LINE__)

#define WINTER_SINGLETON(Type) \
private:\
    Type();\
    static Type* __inst;\
\
public:\
    static inline Type* instance ( )\
    {\
        if (__inst == 0)\
        {\
            __inst = new Type;\
            qDebug() << "[WINTER_SINGLETON()] Created singleton instance of " #Type << ".";\
        }\
        return __inst;\
    }\

#define WINTER_SINGLETON_DEFINE(Type) Type* Type::__inst = 0;

/**
 * @def WINTER_DEPRECATED
 * @ingroup WintermuteMacros
 *
 * The WINTER_DEPRECATED macro can be used to trigger compile-time warnings
 * with newer compilers when deprecated functions are used.
 *
 * For non-inline functions, the macro gets inserted at front of the
 * function declaration, right before the return type:
 *
 * \code
 * WINTER_DEPRECATED void deprecatedFunctionA();
 * WINTER_DEPRECATED int deprecatedFunctionB() const;
 * \endcode
 *
 * For functions which are implemented inline,
 * the WINTER_DEPRECATED macro is inserted at the front, right before the return
 * type, but after "static", "inline" or "virtual":
 *
 * \code
 * WINTER_DEPRECATED void deprecatedInlineFunctionA() { .. }
 * virtual WINTER_DEPRECATED int deprecatedInlineFunctionB() { .. }
 * static WINTER_DEPRECATED bool deprecatedInlineFunctionC() { .. }
 * inline WINTER_DEPRECATED bool deprecatedInlineFunctionD() { .. }
 * \endcode
 *
 * You can also mark whole structs or classes as deprecated, by inserting the
 * WINTER_DEPRECATED macro after the struct/class keyword, but before the
 * name of the struct/class:
 *
 * \code
 * class WINTER_DEPRECATED DeprecatedClass { };
 * struct WINTER_DEPRECATED DeprecatedStruct { };
 * \endcode
 *
 * \note
 * WINTER_DEPRECATED cannot be used for constructors,
 * use WINTER_CONSTRUCTOR_DEPRECATED instead.
 */

#ifdef WINTER_WARNINGS_DEPRECATED
# ifndef WINTER_DEPRECATED
#  define WINTER_DEPRECATED Q_DECL_DEPRECATED
# endif

# ifdef __GNUC__
#  if __GNUC__ == 3 && __GNUC_MINOR__ <= 3
#   define WINTER_CONSTRUCTOR_DEPRECATED
#  else
#   define WINTER_CONSTRUCTOR_DEPRECATED Q_DECL_CONSTRUCTOR_DEPRECATED
#  endif
# else
#  define WINTER_CONSTRUCTOR_DEPRECATED Q_DECL_CONSTRUCTOR_DEPRECATED
# endif

#else
# undef WINTER_CONSTRUCTOR_DEPRECATED
# undef WINTER_DEPRECATED
#endif

#define QT_DEPRECATED_WARNINGS WINTER_WARNINGS_DEPRECATED

#endif // WINTERMUTE_GLOBAL_HPP

// kate: indent-mode cstyle; indent-width 4; replace-tabs on;
